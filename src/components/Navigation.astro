---
import { Image } from "astro:assets";
import logo from "../assets/images/logo.png";
import ProductToggle from "./react/ProductToggle";
import CatButton from "./react/CatButton";
import UserButton from "./react/UserButton";
import BasketButton from "./react/BasketButton";
import MobileMenu from "./MobileMenu.astro";
export const prerender = false;

let logStatus = "loggedOut";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (accessToken && refreshToken) {
  logStatus = "loggedIn";
}
---

<nav id="header" class="bg-surface-navbar | w-full h-32 sm:h-48 | flex flex-col | justify-around | fixed top-0 left-0 z-50 | pt-4 pb-4 sm:pb-0 | transition-transform duration-300 ease-in-out">
    <div id="upper-nav" class="w-full h-14 sm:h-22 | flex flex-row | justify-between lg:justify-center lg:relative | px-4 sm:px-8 | pb-2 sm:pb-3">
        <div class="hidden lg:block lg:absolute lg:left-4 xl:left-8 self-center">    
            <a href="/"><Image src={logo} alt="Nintendopusheren" width={100} height={75} class="hidden sm:block"/></a>
        </div>
        <a href="/" class="hover:no-underline"><h1 class="font-heading text-hero text-2xl sm:text-4xl lg:text-6xl">Nintendopusheren</h1></a>
        <div id="burger-icon" class="flex flex-col gap-2 | cursor-pointer | lg:hidden self-center">
            <div class="burger-line w-10 h-0.75 | bg-surface-burger-icon transition-transform duration-300 ease-in-out"></div>
            <div class="burger-line w-10 h-0.75 | bg-surface-burger-icon transition-transform duration-300 ease-in-out"></div>
            <div class="burger-line w-10 h-0.75 | bg-surface-burger-icon transition-transform duration-300 ease-in-out"></div>
        </div>
    </div>
    <div id="lower-nav" class="w-full h-14 sm:h-22 | flex flex-row | justify-between | items-center | px-4 sm:px-8">
        <div class="flex flex-row gap-28">
            <ProductToggle client:load />
            <CatButton name="Nyheder" client:load />
            <CatButton name="Info" client:load />
            <CatButton name="Kontakt" client:load />
        </div>
        <div class="flex flex-row gap-4">
            <UserButton logStatus={logStatus} client:load  />
            <BasketButton client:load />
        </div>
    </div>
</nav>

<!-- Mobile Menu -->
<MobileMenu />

<script>
    // Backup event dispatch for login success
    document.addEventListener('DOMContentLoaded', function() {
        const urlParams = new URLSearchParams(window.location.search);
        
        if (urlParams.get('login') === 'success') {
            // Trigger a custom event as backup
            window.dispatchEvent(new CustomEvent('loginSuccess'));
        }
    });

    
</script>

<script>
	// Initialize navbar scroll behavior and CatMenu toggle
	function initNavbarScroll() {
		const navbar = document.getElementById('header');
		const upperNav = document.getElementById('upper-nav');
		const catMenu = document.getElementById('catMenu');
		const productToggle = document.getElementById('product-toggle');
		const burgerIcon = document.getElementById('burger-icon');
		
		if (!navbar || !upperNav) return;
		
		let pastScrollPosition = 0;
		let isCatMenuVisible = false;
		let manualToggleTime = 0;

		// Initialize CatMenu on desktop - show by default
		if (catMenu && window.innerWidth >= 1024) {
			catMenu.classList.remove('-translate-y-full');
			isCatMenuVisible = true;
		}

		// Desktop CatMenu toggle functionality
		if (productToggle && catMenu) {
			productToggle.addEventListener('click', () => {
				if (window.innerWidth >= 1024) {
					if (isCatMenuVisible) {
						// Hide CatMenu
						catMenu.classList.add('catmenu-hidden');
						isCatMenuVisible = false;
					} else {
						// Show CatMenu
						catMenu.classList.remove('catmenu-hidden');
						isCatMenuVisible = true;
					}
					manualToggleTime = Date.now();
				}
			});
		}
		
		// Navbar scroll behavior
		window.addEventListener('scroll', () => {
			// Prevent interference with manual toggles
			if (Date.now() - manualToggleTime < 500) return;
			
			const currentScrollPosition = window.scrollY;
			const isScrollingDown = currentScrollPosition > pastScrollPosition && currentScrollPosition > 130;
			
			if (isScrollingDown) {
				// Hide upper navbar section
				navbar.classList.add('-translate-y-14', 'sm:-translate-y-24');
				navbar.classList.remove('translate-y-0');
				
				// Adjust mobile CatMenu positioning
				if (catMenu) {
					catMenu.classList.remove('top-32');
					catMenu.classList.add('top-18');
					catMenu.classList.remove('h-[calc(100vh-8rem)]');
					catMenu.classList.add('h-[calc(100vh-4.5rem)]');
				}
				
				// Adjust desktop CatMenu top position when navbar shrinks
				if (catMenu && window.innerWidth >= 1024 && isCatMenuVisible && !catMenu.classList.contains('catmenu-hidden')) {
					catMenu.classList.remove('lg:top-48');
					catMenu.classList.add('lg:top-24');
				}
			} else {
				// Show upper navbar section
				navbar.classList.add('translate-y-0');
				navbar.classList.remove('-translate-y-14', 'sm:-translate-y-24');
				
				// Restore mobile CatMenu positioning
				if (catMenu) {
					catMenu.classList.remove('top-18');
					catMenu.classList.add('top-32');
					catMenu.classList.remove('h-[calc(100vh-4.5rem)]');
					catMenu.classList.add('h-[calc(100vh-8rem)]');
				}
				
				// Restore desktop CatMenu position
				if (catMenu && window.innerWidth >= 1024 && isCatMenuVisible && !catMenu.classList.contains('catmenu-hidden')) {
					catMenu.classList.remove('lg:top-24');
					catMenu.classList.add('lg:top-48');
				}
			}
			pastScrollPosition = currentScrollPosition;
		});
	}

	// Initialize on page load
	document.addEventListener('DOMContentLoaded', initNavbarScroll);
	document.addEventListener('astro:page-load', initNavbarScroll);
	
	// Fallback for already loaded DOM
	if (document.readyState !== 'loading') {
		initNavbarScroll();
	}
</script>

<style>
	.catmenu-hidden {
		transform: translateY(-100%) !important;
	}
	
	@media (min-width: 1024px) {
		#catMenu {
			transition: top 300ms ease-in-out;
		}
	}
	
	/* Burger icon animation */
	.burger-active .burger-line:nth-child(1) {
		transform: rotate(45deg) translate(6px, 6px);
	}
	
	.burger-active .burger-line:nth-child(2) {
		opacity: 0;
	}
	
	.burger-active .burger-line:nth-child(3) {
		transform: rotate(-45deg) translate(6px, -6px);
	}
</style>
